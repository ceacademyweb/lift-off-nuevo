@import "nh-grid/nh-grid";
@import 'hamburgers/dist/hamburgers.min.css';
@import 'aos/dist/aos.css';
// @import 'statics/spop.css';
// @import 'rsuite/dist/rsuite.min.css';


$breakpoints : (s : 0,
  m : 768px,
  lg : 1024px,
  l : 1024px,
  xl : 1400px,
  2xl: 1830px,
  3xl: 1920px);

$prototype : true; // Activa los estilos de prototipado
$dev : true; // Activa los estilos para debuggin
$dev-hover : false; // Estilos de debuggi sólo en hover
$max-width : 1200px; // Ancho máximo de los contenedores ed-container y ed-grid
$l-unit : .5rem; // Unidad básica de layout (para separaciones verticales, margin y padding)
$gap : $l-unit * 4; // Separación entre columnas (2rem)
$fractions : 3 6; // Fracciones para crear columnas (core flexbox)
$container : container; // Clase para el contenedor (core flexbox)
$item : item; // Clase para los items (core flexbox)
$grid-container : ed-grid; // Clase para el contenedor (core grid)
$max-grid-columns : 12; // Máximo número de columnas (core css grid)
$legacy : true; // Soporte para versiones antiguas

// Config
@import "config/functions";
@import "config/mixins";
@import "config/variables";

// Theme (colors and fonts)
@import "theme/typography";

// Base and elements (generic)
@import "base/base";

// LAYOUT
// Escribe solo los estilos de layout (division en regiones del viewport)
@import "layout/layout";

// MODULOS (SMACSS) O COMPONENTES (ITCSS)
// Son los elementos de UI de tu interfaz, como botones, tablas, menus, etc.
// Crea los archivos adicionales que necesites (uno por componente)
@import "components/buttons";
@import "components/menus";
@import "components/header";
@import "components/footer";
@import "components/video";
@import "components/range";
@import "components/modal";

@import "pages/home";
@import "pages/login";
@import "pages/register";
@import "pages/rating";
@import "pages/journal";


// Utilities (hacks)
// Todos los hacks que hayas necesitado para solucionar conflictos
// o resolver situaciones extremas. Se espera poder mejorarlos luego.
@import "hacks/hacks";

.table-fill {
  background: white;
  border-radius:3px;
  border-collapse: collapse;
  height: auto;
  margin: auto;
  max-width: 1200px;
  padding:5px;
  width: 100%;
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
  animation: float 5s infinite;
  button{
    display: table;
    margin: 0 auto;
    border: none;
    background: darkslategray;
    //line-height: 2;
    color: white;
    padding: 0.6em 1em;
    text-transform: uppercase;
    border-radius: .3rem;
  }
}

th {
  color:#D5DDE5;;
  background:#1b1e24;
  border-bottom:4px solid #9ea7af;
  border-right: 1px solid #343a45;
  font-size:23px;
  font-weight: 100;
  padding: .1em 24px;
  text-align:left;
  text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);
  vertical-align:middle;
}

th:first-child {
  border-top-left-radius:3px;
}

th:last-child {
  border-top-right-radius:3px;
  border-right:none;
}

tr {
  border-top: 1px solid #C1C3D1;
  border-bottom-: 1px solid #C1C3D1;
  color:#666B85;
  font-size:16px;
  font-weight:normal;
  text-shadow: 0 1px 1px rgba(256, 256, 256, 0.1);
}

tr:hover td {
  background:#4E5066;
  color:#FFFFFF;
  border-top: 1px solid #22262e;
}

tr:first-child {
  border-top:none;
}

tr:last-child {
  border-bottom:none;
}

tr:nth-child(odd) td {
  background:#EBEBEB;
}

tr:nth-child(odd):hover td {
  background:#4E5066;
}

tr:last-child td:first-child {
  border-bottom-left-radius:3px;
}

tr:last-child td:last-child {
  border-bottom-right-radius:3px;
}

td {
  background:#FFFFFF;
  padding:.2em;
  text-align:left;
  vertical-align:middle;
  font-weight:300;
  font-size:18px;
  text-shadow: -1px -1px 1px rgba(0, 0, 0, 0.1);
  border-right: 1px solid #C1C3D1;
}

td:last-child {
  border-right: 0px;
}

th.text-left {
  text-align: left;
}

th.text-center {
  text-align: center;
}

th.text-right {
  text-align: right;
}

td.text-left {
  text-align: left;
}

td.text-center {
  text-align: center;
}

td.text-right {
  text-align: right;
}
